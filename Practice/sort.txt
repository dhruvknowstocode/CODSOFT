#include<iostream>
using namespace std ;
class Node{
    public:
    int data;
    Node* next;
    Node(int data){
        this->data=data;
        this->next=next;
    }
};
void insert(Node* &head,Node* &tail,int d,int pos){
    if(pos==1){
        Node* nodetoinsert=new Node(d);
        nodetoinsert->next=head;
        head=nodetoinsert;
        tail=nodetoinsert->next;
    }
    else{
        Node* temp=head;
        int cnt=1;
        while(cnt<pos-1){
            temp=temp->next;
            cnt++;
        }
        if(temp->next=NULL){
            Node* nodetoinsert=new Node(d);
            nodetoinsert->next=temp->next;
            temp->next=nodetoinsert;
            tail=temp->next;
        }
        else{
            Node* nodetoinsert=new Node(d);
            nodetoinsert->next=temp->next;
            temp->next=nodetoinsert;
        }
    }
}
void print(Node* head){
    Node* temp=head;
    while(temp!=NULL){
        cout<<temp->data<<" ";
        temp=temp->next;
    }
    cout<<endl;
}
void populate(Node* &tail,Node* curr){
    tail->next=curr;
    tail=curr;
}
Node* sort(Node* &head){
    Node* zerohead=new Node(-1);
    Node* zerotail=new Node(-1);
    Node* onehead=new Node(-1);
    Node* onetail=new Node(-1);
    Node* twohead=new Node(-1);
    Node* twotail=new Node(-1);
    Node* curr=zerohead;
    while(curr!=NULL){
        if(curr->data==0){
            populate(zerotail,curr);
        }
        else if(curr->data==1){
            populate(onetail,curr);
        }
        else if(curr->data==2){
            populate(twotail,curr);
        }
        curr=curr->next;
    }
    zerotail->next=onehead->next;
    onetail->next=twohead->next;
    twotail->next=NULL;
    head=zerohead->next;
    return head;
}
int main(){   
    Node* head=NULL;    
    Node* tail=NULL;    
    insert(head,tail,1,1);
    insert(head,tail,0,2);
    insert(head,tail,2,3);
    insert(head,tail,0,4);
    insert(head,tail,1,5);
    print(head);
    Node* ans=sort(head);
    print(ans);
    return 0;
}